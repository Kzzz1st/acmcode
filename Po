#include <set>
#include <map>
#include <list>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <bitset>
#include <vector>
#include<cstring>
#include <stdio.h>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
#define INF 0x3f3f3f3f
typedef unsigned long long ull;
inline int read(){int s=0,w=1;char ch=getchar();
    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}
    while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();return s*w;}
const int maxn = 2e4+5;
int head[maxn],tot;
struct Edge{
    int to,next;
}e[maxn<<2];
void add_e(int u,int v)
{
    e[tot] = {v, head[u]};
    head[u] = tot++;
}
int dfn[maxn],low[maxn],Time;
int n,m;
int dp[maxn],a[maxn];
bool bri[maxn<<2];
int col[maxn],num[maxn],cnt,sum;
int ans;
void init()
{
    ans=INF;
    tot=Time=0,cnt=0; sum=0;
    memset(bri,false,sizeof(bri));
    for(int i=1;i<maxn;i++)
        low[i]=dfn[i]=0,head[i]=-1,col[i]=num[i]=dp[i]=0;
}
void Tarjan(int x,int fa) // 双连通
{
    dfn[x]=low[x]=++Time;
    for(int i=head[x];i!=-1;i=e[i].next)
    {
        int y=e[i].to;
        if(y==fa) continue;
        if(!dfn[y])
        {
            Tarjan(y,x),low[x]=min(low[x],low[y]);
            if(low[y]>dfn[x]) bri[i]=bri[i^1]=true;
        }
        else low[x]=min(low[x],dfn[y]);
    }
}
void dfscol(int x)  // 双连通染色
{
    col[x]=cnt,num[cnt]+=a[x];
    for(int i=head[x];i!=-1;i=e[i].next)
    {
        int y=e[i].to;
        if(bri[i]||col[y]) continue;
        dfscol(y);
    }
}
void dfs(int x,int fa)
{
    for(int i=head[x];i!=-1;i=e[i].next)
    {
        int y=e[i].to;
        if(y==fa) continue;
        dfs(y,x);
        dp[x]+=dp[y];
    }
}
void dfs1(int x,int fa)
{
    for(int i=head[x];i!=-1;i=e[i].next)
    {
        int y=e[i].to;
        if(y==fa) continue;
        ans=min(ans,abs(dp[y]-(sum-dp[y])));
        dfs1(y,x);
    }
}
int U[maxn<<2],V[maxn<<2];
void solve()
{
    tot=0;
    memset(head,-1,sizeof(head));
    for(int i=1;i<=cnt;i++) dp[i]=num[i];
    for(int i=1;i<=m;i++)
        if(col[U[i]]!=col[V[i]]) add_e(col[U[i]],col[V[i]]),add_e(col[V[i]],col[U[i]]);

    dfs(1,-1);
    dfs1(1,-1);

    if(cnt==1) puts("impossible");

    else printf("%d\n",ans);
}
int main()
{
    while (~scanf("%d%d",&n,&m))
    {
        init();
        for(int i=1;i<=n;i++) a[i]=read(),sum+=a[i];
        for(int i=1;i<=m;i++)
        {
            int u=read(),v=read(); u++,v++;
            U[i]=u,V[i]=v;
            add_e(u,v),add_e(v,u);
        }
        for(int i=1;i<=n;i++)
            if(!dfn[i]) Tarjan(i,i);
        for(int i=1;i<=n;i++)
            if(!col[i]) ++cnt,dfscol(i);
        solve();
    }
    return 0;
}
